package com.mystanford.algo;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.NoSuchElementException;

/**
 * Created by dshen on 3/19/2017.
 */

public class BinaryIn {
    private static int EOF = -1;
    private BufferedInputStream in;
    private int buffer;                  // 8 bits buffer
    private int n;                       // number of bits left in buffer

    /**
     * initialize the binary input stream
     * @param is
     */
    public BinaryIn(InputStream is) {
        in = new BufferedInputStream(is);
        fillOneBuffer();
    }

    private void fillOneBuffer() {
        try {
            buffer = in.read();
            n = 8;
        }
        catch (IOException e) {
            System.err.println("EOF");
            buffer = EOF;
            n = -1;
        }
    }

    /**
     * read next bit from the inputStream
     * @return
     */
    public boolean readBoolean(){
        if(isEmpty()){
            throw new NoSuchElementException("Reading from empty input stream");
        }
        n--;
        // read the buffer's first significant bit
        boolean bit = false;
        if(((buffer>>n) & 1) == 1){
            bit = true;
        }
        if(n==0){
            fillOneBuffer();
        }
        return bit;
    }

    public char readChar(){
        int out = 0;
        for(int i = 0; i<8; i++){
            out <<= 1;
            if(readBoolean()) {
                out |= 1;
            }
        }
        return (char)(out&0xff);
    }

    /**
     * read a 32-bit integer from the inputStream
     * @return
     * @throws NoSuchElementException if there are fewer than 32 bits available
     */
    public int readInt(){
        int out = 0;
        for(int i = 0; i<4; i++){
            out <<= 8;
            out |= readChar();
        }
        return out;
    }

    private boolean isEmpty(){
        return buffer == EOF;
    }
}
