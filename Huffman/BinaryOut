package com.mystanford.algo;

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.OutputStream;

/**
 * Created by dshen on 3/19/2017.
 */

public class BinaryOut {

    private BufferedOutputStream out;
    private int buffer;                // 8-bit buffer of bits
    private int n;                     // number of bits remaining in buffer

    /**
     * default constructor, initialize it from a std output
     */
    public BinaryOut() {
        out = new BufferedOutputStream(System.out);
    }

    /**
     * initialize from an outputStream
     * @param os
     */
    public BinaryOut(OutputStream os) {
        out = new BufferedOutputStream(os);
    }

    /**
     * write out the bit x to the buffer
     * if buffer is full, write out this single byte
     * @param x
     */
    private void writeBit(boolean x) {
        buffer <<= 1;
        if(x){
            buffer |= 1;
        }
        n++;
        if(n == 8) clearBuffer();
    }

    /**
     * write 8 bit byte to the output stream
     * @param x
     */
    private void writeByte(int x){
        assert x>=0 && x<256;
        if(n == 0){
            try{
                out.write(x);
            }catch(IOException e){

            }
        }
        // otherwise write bit of int to the buffer one bit by another
        for (int i = 7; i >= 0; i--) {
            boolean bit = ((x >>> i) & 1) == 1;
            writeBit(bit);
        }
    }

    /**
     * write out the any remaining bits to the outputStream, padding with 0
     */
    private void clearBuffer(){
        if(n == 0){
            return;
        }
        if(n > 0){
            buffer <<= (8 - n);
        }
        try {
            out.write(buffer);
        }catch(IOException e){

        }
        buffer = 0;
        n = 0;
    }

    /**
     * flush out the buffer, padding 0 if the remaining bits are not multiple of 8
     */
    public void flush(){
        clearBuffer();
        try {
            out.flush();
        }catch(IOException e){

        }
    }

    /**
     * flush and close
     */
    public void close(){
        flush();
        try{
            out.close();
        }catch(IOException e){

        }
    }

    /**
     * write the boolean x to the outputStream
     * @param x
     */
    public void write(boolean x){
        writeBit(x);
    }

    /**
     * write 32 bit int to the outputStream
     * @param x
     */
    public void write(int x){
        writeByte((x>>>24)&0xFF);
        writeByte((x>>>16)&0xFF);
        writeByte((x>>>8)&0xFF);
        writeByte(x&0xFF);
    }

    /**
     * write 8 bit char to the output
     * @param x
     */
    public void write(char x) {
        if (x < 0 || x >= 256) throw new IllegalArgumentException("Illegal 8-bit char = " + x);
        writeByte(x);
    }

    /**
     * write r bits char to the outputStream
     * @param x
     * @param r
     */
    public void write(char x, int r) {
        if (r == 8) {
            write(x);
            return;
        }
        if (r < 1 || r > 16) throw new IllegalArgumentException("Illegal value for r = " + r);
        if (x >= (1 << r))   throw new IllegalArgumentException("Illegal " + r + "-bit char = " + x);
        for (int i = 0; i < r; i++) {
            boolean bit = ((x >>> (r - i - 1)) & 1) == 1;
            writeBit(bit);
        }
    }

}
